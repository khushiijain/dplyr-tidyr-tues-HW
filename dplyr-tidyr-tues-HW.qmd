---
title: "dplyr-tues-HW"
format: html
editor: visual
---

# Exercise 1

```{r}
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyr)
spotify <- read.csv("/Users/harshitajain/Downloads/Everything/2023 Onwards/Data Management/R Pojects/dplyr-tidyr-tues-HW/top10s.csv")
```

### E1.1

```{r}
df1 <- spotify |> distinct(title) |> nrow()
df2 <- spotify |> distinct(artist) |> nrow()
df3 <- spotify |> distinct(top.genre) |> nrow()
```

Using the distinct function, we get songs = `r df1`, artists = `r df2` and genres = `r df3`

### E1.2

```{r}
songs.per.year <- spotify |> group_by(year) |>
  summarise(n = n())

knitr::kable(songs.per.year, caption = "Number of Songs per Year")
```

### E1.3

```{r}
# Calculate the number of unique songs per artist
pop_artist <- spotify |> 
  group_by(artist) |>
  summarise(n = n()) |>
  arrange(desc(n))

# Most popular artist and song count pull
most_pop_artist <- pop_artist |> 
  slice_max(order_by = n) |>
  pull(artist)

# Song count of the most popular artist
most_pop_artist_song_count <- pop_artist |> 
  slice_max(order_by = n) |>
  pull(n)
```

| Using the full function, we got the most popular artist ***`r most_pop_artist`***, with the song count of ***`r most_pop_artist_song_count`***.

### E1.4

```{r}
genre_wise_stats <- spotify |>
  group_by(top.genre) |>
  summarise(
    min_bpm = min(bpm, na.rm = TRUE),
    max_bpm = max(bpm, na.rm = TRUE),
    mean_bpm = mean(bpm, na.rm = TRUE),
    median_bpm = median(bpm, na.rm = TRUE),
    num_songs = n_distinct(title)  ## no single song is repeated
  )

knitr::kable(genre_wise_stats, caption = "Statistics for Different Musical Genres")
```

### E1.5

```{r}
year_wise_stats <- spotify |>
  group_by(year) |>
  summarise(
    median_energy = median(nrgy, na.rm = TRUE),
    median_danceability = median(dnce, na.rm = TRUE)
  )
```

### E1.6

```{r}
year_wise_stats$year <- factor(year_wise_stats$year)

ggplot(data = year_wise_stats, aes(x = year, group = 1)) +
  geom_line(aes(y = median_energy, color = "Median Energy"), color = "red") +
  geom_line(aes(y = median_danceability, color = "Median Danceability"), color = "blue") +
  labs(title = "Median Energy and Danceability 2010-2019",
       x = "Year",
       y = "Median Value")
```

# Exercise 2

```{r}
dropout <- readRDS("dropout.Rds")
```

### E2.1

```{r}
median_age <- dropout |>
  group_by(Gender, `Marital status`) |>
  summarise(median_age = median(`Age at enrollment`, na.rm = TRUE))
```

### E2.2

```{r}
gender_wise_median_age <- median_age |>
  pivot_wider(names_from = Gender, values_from = median_age)

colnames(gender_wise_median_age) <- c("Marital status", "Female", "Male")

knitr::kable(gender_wise_median_age)
```

### E2.3

```{r}
mean_units <- dropout |>
  group_by(Target) |>
  summarise(across(starts_with("Curricular units"), mean))
```

### E2.4

```{r}
reversed_data <- mean_units |>
  pivot_longer(cols = -Target,
               names_to = "Curricular units",
               values_to = "Mean") |> 
          slice(1:3, 13:15, 25:27) #selecting values for only 1st Semester

final_data <- reversed_data |>
  pivot_wider(names_from = Target, values_from = Mean)

knitr::kable(final_data, caption = "Curricular Units Mean for 1st Semester over different Targets")
```
## 
